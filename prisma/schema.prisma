generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  STUDENT
  TEACHER
}

enum MaterialType {
  PDF
  DOCX
  IMAGE
  VIDEO
  AUDIO
}

model Classes {
  id              Int              @id @default(autoincrement())
  roomId          String?          @default(uuid()) @map("room_id")
  created_at      DateTime?        @default(now())
  updated_at      DateTime         @updatedAt
  name            String?
  description     String?
  end_at          DateTime         @db.Time()
  start_at        DateTime         @db.Time()
  course_id       Int?
  teacher_id      Int?
  level_id        Int?
  course          Courses?         @relation(fields: [course_id], references: [id], onDelete: SetNull, onUpdate: Cascade, map: "fk_classes_course")
  level           Level?           @relation(fields: [level_id], references: [id], onDelete: SetNull, onUpdate: Cascade, map: "fk_classes_level")
  teacher         Teachers?        @relation(fields: [teacher_id], references: [id], onDelete: SetNull, onUpdate: Cascade, map: "fk_classes_teacher")
  student_classes StudentClasses[]

  @@index([course_id], map: "fk_classes_course")
  @@index([level_id], map: "fk_classes_level")
  @@index([teacher_id], map: "fk_classes_teacher")
  @@index([roomId], map: "room_id_idx")
  @@fulltext([description])
  @@map("classes")
}

model Courses {
  id              Int              @id @default(autoincrement())
  created_at      DateTime?        @default(now())
  updated_at      DateTime?        @updatedAt
  name            String?
  description     String?
  price           Decimal          @default(0)
  cover_img       String?
  start_at        DateTime         @default(now())
  end_at          DateTime
  teacher_id      Int?
  level_id        Int?
  classes         Classes[]
  level           Level?           @relation(fields: [level_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_courses_level")
  teacher         Teachers?        @relation(fields: [teacher_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_courses_teacher")
  cross_words     CrossWords[]
  exams           exams[]
  student_courses StudentCourses[]
  Materials       Materials[]
  Questions       Questions[]
  Attendance      Attendance[]
  Assignments     Assignments[]

  @@index([level_id], map: "fk_courses_level")
  @@index([teacher_id], map: "fk_courses_teacher")
  @@fulltext([description])
  @@map("courses")
}

model Level {
  id         Int        @id @default(autoincrement())
  created_at DateTime?  @default(now())
  updated_at DateTime?  @updatedAt
  name       String
  classes    Classes[]
  courses    Courses[]
  students   Students[]

  @@map("levels")
}

model Questions {
  id                    Int                     @id @default(autoincrement())
  contents              String?
  type                  String?
  course_id             Int?
  exam_id               Int?
  answers_orders        AnswersOrder[]
  course                Courses?                @relation(fields: [course_id], references: [id], onDelete: SetNull, onUpdate: NoAction, map: "fk_questions_class")
  exam                  exams?                  @relation(fields: [exam_id], references: [id], onDelete: SetNull, onUpdate: NoAction, map: "fk_questions_exam")
  student_questions     StudentQuestions[]
  YesOrNoAnswers        YesOrNoAnswers[]
  MultiOptionsAnswers   MultiOptionsAnswers[]
  ReqularQuestionAnswer ReqularQuestionAnswer[]

  @@index([course_id], map: "fk_questions_class")
  @@index([exam_id], map: "fk_questions_exam")
  @@fulltext([contents])
  @@map("questions")
}

model ReqularQuestionAnswer {
  id          Int       @id @default(autoincrement())
  question    Questions @relation(fields: [question_id], references: [id])
  question_id Int

  @@map("reqular_question_answer")
}

model YesOrNoAnswers {
  id          Int       @id @default(autoincrement())
  question    Questions @relation(fields: [question_id], references: [id])
  question_id Int
  answer      Boolean   @default(false)

  @@map("yes_or_no_answer")
}

model AnswersOrder {
  id          Int       @id @default(autoincrement())
  content     String?
  num_value   Int?
  question_id Int
  questions   Questions @relation(fields: [question_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_answers_orders_question")

  @@index([question_id], map: "fk_answers_orders_question")
  @@fulltext([content])
  @@map("answers_orders")
}

model MultiOptionsAnswers {
  id          Int       @id @default(autoincrement())
  content     String
  correct     Boolean   @default(false)
  question    Questions @relation(fields: [question_id], references: [id])
  question_id Int

  @@fulltext([content])
  @@map("multi_options_answers")
}

model StudentClasses {
  student_user_id Int
  class_id        Int
  classe          Classes  @relation(fields: [class_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_student_classes_class")
  student         Students @relation(fields: [student_user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_student_classes_student")

  @@id([student_user_id, class_id])
  @@index([class_id], map: "fk_student_classes_class")
  @@map("student_classes")
}

model StudentCourses {
  student_user_id Int
  course_id       Int?
  course          Courses? @relation(fields: [course_id], references: [id], onDelete: SetNull, onUpdate: NoAction, map: "fk_student_courses_course")
  student         Students @relation(fields: [student_user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_student_courses_student")

  @@id([student_user_id])
  @@unique([student_user_id, course_id])
  @@index([course_id], map: "fk_student_courses_course")
  @@map("student_courses")
}

model Students {
  id                  Int                  @id @default(autoincrement())
  level_id            Int?
  grade               String
  birthdate           DateTime
  student_classes     StudentClasses[]
  student_courses     StudentCourses[]
  student_cross_words StudentWrossWords[]
  student_exams       StudentExams[]
  student_questions   StudentQuestions[]
  level               Level?               @relation(fields: [level_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_students_level")
  user                users                @relation(fields: [id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_students_user")
  Attendance          Attendance[]
  StudentAssignments  StudentAssignments[]

  @@index([level_id], map: "fk_students_level")
  @@map("students")
}

model Teachers {
  degree    String?
  id        Int         @id @default(autoincrement())
  classes   Classes[]
  courses   Courses[]
  exams     exams[]
  user      users       @relation(fields: [id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_teachers_user")
  Materials Materials[]

  @@map("teachers")
}

model users {
  id         Int       @id @default(autoincrement())
  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt
  name       String?
  email      String?   @unique
  password   String?
  phone      String?
  role       Role      @default(STUDENT)
  student    Students?
  teacher    Teachers?

  @@map("users")
}

model exams {
  id            Int            @id @default(autoincrement())
  name          String
  date          DateTime
  teacher_id    Int?
  course_id     Int
  courses       Courses        @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_exams_course")
  teachers      Teachers?      @relation(fields: [teacher_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_exams_teacher")
  questions     Questions[]
  student_exams StudentExams[]

  @@index([course_id], map: "fk_exams_course")
  @@index([teacher_id], map: "fk_exams_teacher")
  @@map("exams")
}

model CrossWords {
  id                  Int                 @id @default(autoincrement())
  row_start           Int?
  row_end             Int?
  col_start           Int?
  col_end             Int?
  answer              String?
  clue                String?
  course_id           Int?
  course              Courses?            @relation(fields: [course_id], references: [id], onDelete: SetNull, onUpdate: NoAction, map: "fk_cross_words_course")
  student_cross_words StudentWrossWords[]

  @@index([course_id], map: "fk_cross_words_course")
  @@map("cross_words")
}

model StudentWrossWords {
  student_user_id Int
  cross_word_id   Int
  cross_words     CrossWords @relation(fields: [cross_word_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_student_cross_words_cross_word")
  student         Students   @relation(fields: [student_user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_student_cross_words_student")

  @@id([student_user_id, cross_word_id])
  @@index([cross_word_id], map: "fk_student_cross_words_cross_word")
  @@map("student_cross_words")
}

model StudentExams {
  student_user_id Int
  exam_id         Int
  exams           exams    @relation(fields: [exam_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_student_exams_exam")
  student         Students @relation(fields: [student_user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_student_exams_student")

  @@id([student_user_id, exam_id])
  @@index([exam_id], map: "fk_student_exams_exam")
  @@map("student_exams")
}

model StudentQuestions {
  student_user_id Int
  question_id     Int
  question        Questions @relation(fields: [question_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_student_questions_question")
  student         Students  @relation(fields: [student_user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_student_questions_student")

  @@id([student_user_id, question_id])
  @@index([question_id], map: "fk_student_questions_question")
  @@map("student_questions")
}

model Materials {
  id         Int          @id @default(autoincrement())
  type       MaterialType @default(PDF)
  file_path  String
  course     Courses?     @relation(fields: [course_id], references: [id], onDelete: SetNull)
  teacher    Teachers?    @relation(fields: [teacher_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  course_id  Int?
  teacher_id Int?

  assignments   Assignments? @relation(fields: [assignment_id], references: [id])
  assignment_id Int?         @map("assignments_id")

  @@map("materials")
}

model Assignments {
  id                 Int                  @id @default(autoincrement())
  materials          Materials[]
  dead_line          DateTime
  instructions       String               @db.Text
  course             Courses?             @relation(fields: [courses_id], references: [id])
  courses_id         Int?
  StudentAssignments StudentAssignments[]

  mark Int

  @@map("assignments")
}

model Attendance {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now())
  student    Students @relation(fields: [studentsId], references: [id])
  course     Courses  @relation(fields: [coursesId], references: [id])
  studentsId Int      @map("student_id")
  coursesId  Int      @map("course_id")

  @@map("attendance")
}

model StudentAssignments {
  id Int @id @default(autoincrement())

  student_id    Int
  assignment_id Int
  student       Students     @relation(fields: [student_id], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "fk_student_assignments_student")
  assignment    Assignments? @relation(fields: [assignmentsId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  assignmentsId Int?
  mark          Int

  @@map("student_assignments")
}
